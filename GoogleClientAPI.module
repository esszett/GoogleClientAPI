<?php namespace ProcessWire;

/**
 * Google Client API 
 * 
 * Connects ProcessWire with the Google Client Library and manages authentication.
 * 
 * Copyright 2019 by Ryan Cramer Design, LLC
 * 
 * The module gives you an easy connection to all of the Google API services to use
 * according to Google's docs. However, it also comes with helper classes for working
 * with Google Sheets and Google Calendar, which simplify some API tasks to be more
 * like the ProcessWire API. 
 * 
 * This module also requires that the Google API PHP client library be installed,
 * which can be installed via Composer or downloaded. See the README.md file for more.
 * 
 * Once installed, the module needs to be connected with a google account and given
 * access to the scopes (services) you intend to use. 
 * 
 * USAGE
 * ~~~~~
 * // get the module
 * $google = $modules->get('GoogleClientAPI');
 * 
 * // use ProcessWire GoogleSheets API
 * $sheets = $google->sheets();
 * 
 * // use ProcessWire GoogleCalendar API
 * $calendar = $google->calendar(); 
 * 
 * // use any other google services via the \Google_Client class
 * $client = $google->getClient();
 * ~~~~~
 * 
 * CONFIG SETTINGS
 * @property string $accessToken JSON access token data
 * @property string $refreshToken refresh token
 * @property string $authConfig JSON client secret data
 * @property string $authConfigHash Hash of authConfig for detecting changes
 * @property int $configUserID ProccessWire user ID of user that $authConfig belongs to
 * @property string $redirectURL 
 * @property string $applicationName
 * @property array $scopes
 * @property string $scopesHash
 * @property string $libVersion Google Client PHP API library version
 * 
 * API PROPERTIES
 * @property GoogleCalendar $calender
 * @property GoogleSheets $sheets
 * @property \Google_Client $client
 * 
 * 
 */
class GoogleClientAPI extends WireData implements Module, ConfigurableModule {
	
	public static function getModuleInfo() {
		return array(
			'title' => 'Google Client API',
			'summary' => 'Connects ProcessWire with the Google Client Library and manages authentication.',
			'version' => 4, 
			'license' => 'MPL 2.0',
			'author' => 'Ryan Cramer',
			'icon' => 'google',
		);
	}

	const debug = false;
	
	/**
	 * Google PHP API client default download version
	 * 
	 */
	const defaultLibVersion = '2.2.3'; 

	/**
	 * Construct by setup of default config values
	 * 
	 */
	public function __construct() {
		parent::__construct();
		$this->set('applicationName', '');
		$this->set('accessToken', '');	
		$this->set('refreshToken', '');
		$this->set('authConfig', '');
		$this->set('authConfigHash', '');
		$this->set('configUserID', 0); 
		$this->set('redirectURL', '');
		$this->set('scopes', array());
		$this->set('scopesHash', '');
		$this->set('libVersion', '');
	}

	/**
	 * Initialize the module
	 * 
	 */
	public function init() {
		$this->loadGoogleLibrary();
		if(!count($this->scopes)) {
			$this->set('scopes', array('https://www.googleapis.com/auth/calendar.readonly'));
		}
		require_once(__DIR__ . '/GoogleClientClass.php'); 
	}

	/**
	 * Get setting
	 * 
	 * @param string $key
	 * @return mixed|null|GoogleClientClass
	 * 
	 */
	public function get($key) {
		if($key === 'calendar') return $this->calendar();
		if($key === 'sheets') return $this->sheets();
		if($key === 'client') return $this->getClient();
		return parent::get($key);
	}

	/**
	 * Set config setting
	 * 
	 * @param string $key
	 * @param mixed $value
	 * @return WireData|GoogleClientAPI
	 * 
	 */
	public function set($key, $value) {
		if($key === 'scopes') {
			if(is_string($value)) {
				$value = empty($value) ? array() : explode("\n", $value); 
				foreach($value as $k => $v) $value[$k] = trim($v);
			}
		}
		return parent::set($key, $value);
	}
	
	/**
	 * Return a new instance of the GoogleCalendar class
	 *
	 * (currently just a method for finding events, will expand upon it later)
	 *
	 * @param string $calendarId Optional calendar ID or shareable URL to use
	 * @return GoogleCalendar
	 *
	 */
	public function calendar($calendarId = '') {
		require_once(__DIR__ . '/GoogleCalendar.php');
		$calendar = new GoogleCalendar($this);
		$this->wire($calendar);
		if(!empty($calendarId)) $calendar->setCalendar($calendarId); 
		return $calendar;
	}

	/**
	 * Return a new instance of the GoogleSheets class
	 *
	 * @param string $spreadsheetId Optional spreadsheet ID or spreadsheet URL to use
	 * @return GoogleSheets
	 *
	 */
	public function sheets($spreadsheetId = '') {
		require_once(__DIR__ . '/GoogleSheets.php');
		$sheets = new GoogleSheets($this);
		$this->wire($sheets);
		if(!empty($spreadsheetId)) $sheets->setSpreadsheet($spreadsheetId); 
		return $sheets;
	}

	/**
	 * Get the Google Client
	 * 
	 * @param array $options
	 * @return bool|\Google_Client
	 * @throws \Google_Exception
	 * 
	 */
	public function getClient($options = array()) {
	
		if(!$this->authConfig) return false;
		
		$defaults = array(
			'applicationName' => $this->applicationName,
			'scopes' => $this->scopes, 
			'accessType' => 'offline',
			'redirectUri' => $this->redirectURL, 
		);
		
		$options = array_merge($defaults, $options);
		
		$client = new \Google_Client();
		$client->setApplicationName($options['applicationName']);
		$client->setScopes($options['scopes']);
		$client->setAuthConfig(json_decode($this->authConfig, true));
		$client->setAccessType($options['accessType']);
		$client->setRedirectUri($options['redirectUri']);
		
		$this->setAccessToken($client);
		
		return $client;
	}

	/**
	 * Setup the access token and refresh when needed (internal use)
	 * 
	 * #pw-internal
	 * 
	 * @param \Google_Client $client
	 * @return bool
	 * 
	 */
	public function setAccessToken(\Google_Client $client) {
		
		if(!$this->accessToken && $this->wire('process')->className() == 'ProcessModule') {
			// module config, request authorization
			$session = $this->wire('session');
			$input = $this->wire('input');
			$user = $this->wire('user');
			if(!$user->isSuperuser()) return false;
			$code = $input->get('code');
			if(empty($code)) {
				// Request authorization from the user
				$authURL = str_replace('approval_prompt=auto', 'approval_prompt=force', $client->createAuthUrl());
				if($authURL) $session->redirect($authURL);
				return false;
			} else {
				// Exchange auth code for an access token
				$this->accessToken = $client->fetchAccessTokenWithAuthCode($code);
				if(self::debug) $this->message("client->authenticate($code) == $this->accessToken");
				if($this->accessToken) {
					$this->saveAccessToken();
					$session->message($this->_('Saved Google authentication credentials'));
					$session->redirect($this->redirectURL);
					return false;
				}
			}
		}

		$client->setAccessToken($this->accessToken);
		if(!$this->refreshToken) $this->saveAccessToken();
		
		if($client->isAccessTokenExpired()) {
			$refreshToken = $this->getRefreshToken();
			if($refreshToken) {
				$client->refreshToken($refreshToken);
				$this->accessToken = $client->getAccessToken();
				if($this->accessToken) $this->saveAccessToken();
			} else {
				$this->error('Unable to get refresh token');
				return false;
			}
		}
		
		return true;
	}

	/**
	 * Get the refresh token (internal use)
	 * 
	 * #pw-internal
	 * 
	 * @return string
	 * 
	 */
	public function getRefreshToken() {
		
		$refreshToken = '';
		
		if($this->refreshToken) {
			if(strpos($this->refreshToken, '{') === 0) {
				// json encoded (legacy, can eventually be removed)
				$token = json_decode($this->refreshToken, true);
				if(isset($token['refresh_token'])) $refreshToken = $token['refresh_token'];	
			} else {
				// not encoded
				$refreshToken = $this->refreshToken;
			}
			
		} else if($this->accessToken) {
			// attempt to get from accessToken
			$token = is_array($this->accessToken) ? $this->accessToken : json_decode($this->accessToken, true);
			if($token && isset($token['refresh_token'])) {
				$refreshToken = $token['refresh_token'];
			}
			
		} else {
			// unable to get it
		}
		
		return $refreshToken;
	}

	/**
	 * Save the access token to module config data (internal use)
	 * 
	 * #pw-internal
	 * 
	 */
	public function saveAccessToken() {
		$configData = $this->wire('modules')->getModuleConfigData($this);
		$configData['accessToken'] = $this->accessToken;
		$configData['authConfigHash'] = md5($this->authConfig);
		$configData['scopesHash'] = $this->scopesHash();
		if(empty($configData['refreshToken'])) {
			$configData['refreshToken'] = $this->getRefreshToken();
		}
		$this->wire('modules')->saveModuleConfigData($this, $configData);
		if(self::debug) {
			$this->message('saveModuleConfigData');
			$this->message($configData);
		}
	}

	/**
	 * Generate the current hash from $this->>scopes, which may be different from $this->scopesHash (internal use)
	 * 
	 * #pw-internal
	 * 
	 * @return string
	 * 
	 */
	public function scopesHash() {
		return md5(implode(' ', $this->scopes));
	}
	
	/**
	 * Get Google library path
	 * 
	 * #pw-internal
	 *
	 * @param bool $getParentPath
	 * @param bool $getUrl
	 * @return string
	 * @throws WireException
	 *
	 */
	public function getGoogleLibPath($getParentPath = false, $getUrl = false) {
		$config = $this->wire('config');
		$path = ($getUrl ? $config->urls->assets : $config->paths->assets) . $this->className() . '/';
		if($getParentPath) return $path;
		return $path . 'google-api-php-client/';
	}

	/**
	 * Get Google library version
	 *
	 * @return string
	 *
	 */
	public function getGoogleLibVersion() {
		if(!class_exists("\\Google_Client")) return '';
		return \Google_Client::LIBVER;
	}

	/**
	 * Get autoload file for Google library
	 * 
	 * #pw-internal
	 *
	 * @param bool $getUrl
	 * @return string
	 *
	 */
	public function getGoogleAutoloadFile($getUrl = false) {
		return $this->getGoogleLibPath(false, $getUrl) . 'vendor/autoload.php';
	}

	/**
	 * Load the Google Library
	 * 
	 * #pw-internal
	 *
	 * @return bool
	 *
	 */
	protected function loadGoogleLibrary() {
		if(class_exists("\\Google_Client")) return true;
		$file = $this->getGoogleAutoloadFile();
		if(file_exists($file)) {
			require_once($file);
			return true;
		} else {
			/*
			$this->warning(
				"ProcessWire $this module requires that the " .
				"<a target='_blank' href='https://github.com/google/google-api-php-client/'>Google API PHP client library</a> " .
				"be installed. See module configuration for further instructions.",
				Notice::allowMarkup
			);
			*/
			return false;
		}
	}

	/**
	 * Module configuration
	 * 
	 * #pw-internal
	 * 
	 * @param InputfieldWrapper $form
	 * 
	 */
	public function getModuleConfigInputfields(InputfieldWrapper $form) {
		require_once(__DIR__ . '/GoogleClientConfig.php'); 
		$moduleConfig = new GoogleClientConfig($this);
		$moduleConfig->getModuleConfigInputfields($form);
	}

	/**
	 * Uninstall module
	 * 
	 * #pw-internal
	 * 
	 */
	public function ___uninstall() {
		$assetPath = $this->wire('config')->paths->assets . $this->className() . '/';
		if(is_dir($assetPath)) {
			if($this->wire('files')->rmdir($assetPath, true)) {
				$this->message("Removed: $assetPath");
			} else {
				$this->error("Error removing: $assetPath");
			}
		}
	}

	/*** DEPRECATED METHODS ***************************************************************/

	/**
	 * Get calendar events (deprecated)
	 *
	 * @deprecated please use $modules->GoogleClientAPI->calendar($calendarId)->getEvents(...) instead
	 * @param string $calendarId
	 * @param array $options
	 * @return \Google_Service_Calendar_Events|bool
	 *
	 */
	public function getCalendarEvents($calendarId = '', array $options = array()) {
		return $this->calendar($calendarId)->getEvents($options);
	}
}


